package com.dnf.web;
import java.io.Console;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.dnf.dto.CustMsg;
import com.dnf.dto.WorkMsg;
import com.dnf.entity.CustAmount;
import com.dnf.entity.Customer;
import com.dnf.entity.OrderMessage;
import com.dnf.service.CustomerService;
import com.dnf.utils.FileUpload;
import com.dnf.utils.Orderutils;
import com.dnf.utils.RegExputils;
import com.dnf.utils.Result;


@Controller
@RequestMapping("/")
public class LoanController {

	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private CustomerService customerService;
	
	@RequestMapping(value="/loan.action", method=RequestMethod.POST)
	@ResponseBody
	public Result loanAction(HttpServletRequest request){
		String orderAmount = request.getParameter("loan_num");
		String loanPurpose = request.getParameter("loan_use");
		String creditCardId = request.getParameter("loan_bank_card_num");
		String loanPassword = request.getParameter("loan_password");
		String loanTime1 = request.getParameter("loan_time");
		String url = request.getParameter("loan_video_url");
		Customer cust = (Customer) request.getSession().getAttribute("customer");
		CustMsg custMsg = (CustMsg) request.getSession().getAttribute("customerMsg");
		if(custMsg == null){
			logger.error("用户为空");
			return new Result(false, "error请重新登录");
		}
//		校验密码是否正确
		if(!loanPassword.equals(cust.getPassword())){
			return new Result(false,"密码错误");
		}
		logger.info("url: " + url);
		String orderId = RegExputils.getOrderIdFromvideoUrl(url);
		String msg_type = "1003";
		String phoneNum = cust.getPhoneNum();
		String state = "10N";
		Date createDate = new Date();
		String msg = "";
		
//string 转为 date类型
		if(loanTime1 == "1个月 "){
			loanTime1 = "1";
		}else if(loanTime1 == "3个月"){
			loanTime1 = "3";
		}else{
			loanTime1 = "6";
		}
		int loanTime = Integer.parseInt(loanTime1);
		Calendar now = Calendar.getInstance();
		now.add(Calendar.MONTH,loanTime);
		Date loanTime2 = now.getTime();
		
		if(orderId != null){
			msg = createOrderXml(custMsg.getName(), phoneNum, creditCardId, custMsg.getIdCardNum(), 
					orderAmount, orderId, url, custMsg.getCityCode(), loanPurpose, loanTime1);
			logger.info("订单" + orderId + "xml : "  + msg);
			int i = customerService.insert2customerLoan(orderId, msg_type, state, phoneNum, msg, createDate,
					custMsg.getCityCode(),loanTime2);
			logger.info(""+i);
		}
		return new Result(true, null);
	}

	@RequestMapping("/info.loan_video")
	@ResponseBody
	public String loadVideo(@RequestParam("loan_video") MultipartFile file, HttpServletRequest request, HttpServletResponse response){
		Customer cust = (Customer) request.getSession().getAttribute("customer");
		String oraginalFileName = file.getOriginalFilename();
		String orderId = Orderutils.getOrderId();
		String filename = orderId + "video";
		String reg = RegExputils.checkVideo(oraginalFileName);//判断video类型是否符合要求
		if(reg.equals("00")){
			return new Result(false, "视频格式不符合要求").toString();
		} else {
			filename = filename + reg;
		}
		String root = request.getSession().getServletContext().getRealPath("/");
		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
		String path = root + "/resources/customer/" + cust.getPhoneNum() + "/video/"+ format1.format(new Date()) + "/";
		logger.info("filename: " + filename + " path:" + path);
		if(FileUpload.uploadIdCardFile(file, path, filename)){
			Object url = "resource/customer/" + cust.getPhoneNum() + "/video/" + format1.format(new Date()) + "/" + filename;
			return new Result<Object>(true, url).toString();
		} else {
			return new Result(false, "上传失败").toString();
		}	
	}
	
	public String createOrderXml(String name, String phoneNum, String creditCardId, String idCardNum, String orderAmount, String orderId,
			String viderUrl, String cityCode, String loanPurpose, String loanTime){
		// 创建Document对象
        Document document = DocumentHelper.createDocument();
        Element root = document.addElement( "workMsg" );
        root.addElement("cust_name").setText(name);
        root.addElement("phone_num").setText(phoneNum);
        root.addElement("credit_card_id").setText(creditCardId);
        root.addElement("id_card_num").setText(idCardNum);
        root.addElement("order_amount").setText(orderAmount);
        root.addElement("order_id").setText(orderId);
        root.addElement("video_url").setText(viderUrl);
        root.addElement("city_code").setText(cityCode);
        root.addElement("loan_purpose").setText(loanPurpose);
        root.addElement("loan_time").setText(loanTime);
        return document.asXML();
	}
	
	@RequestMapping(value="/orderMsg.action", method=RequestMethod.POST)
	@ResponseBody
	public Result getOrderMsg(HttpServletRequest request) {
		Customer cust = (Customer) request.getSession().getAttribute("customer");
		String phoneNum = cust.getPhoneNum();
		String orderId = request.getParameter("orderId");
		logger.info("orderid : " + orderId);
		String msgType = request.getParameter("msgType");
		String startDate = request.getParameter("startDate");
		String endDate = request.getParameter("endDate");
		logger.info(endDate);
		String sql = "SELECT id,order_id,msg_type,state,phone_num,order_msg,create_date,review_date,error_log,city_code,loan_time,ext1 FROM dnf_order_msg where phone_num=" + phoneNum + " ";
		if(!"".equals(orderId.trim())){
			sql = sql + "and order_id = " + orderId + " ";
		}
		if(msgType != ""){
			if(msgType.equals("1003") || msgType.equals("1005") || msgType.equals("1008")){
				sql = sql + "and msg_type=" + msgType + " ";
			}
		}
		if(startDate != "" && endDate != ""){
			sql = sql + "and create_date between " + "'" + startDate + "'" + " and " + "'" + endDate + "'" + " "; 
		}
		
		List<OrderMessage> OrderMsgList = customerService.query4OrderMessage(sql);
		
//		OrderMessage ordermsg1 = OrderMsg.get(0);
		List<WorkMsg> workMsgList = new ArrayList();
		for(OrderMessage orderMessage : OrderMsgList){
			String ordermsg = orderMessage.getOrderMsg();			
			Document orderDetail = null;
			try {
				orderDetail = DocumentHelper.parseText(ordermsg);
				Element root = orderDetail.getRootElement();
				String xphoneNum = root.element("phone_num").getData().toString();
				String xorderId = root.element("order_id").getData().toString();
				String xcustName = root.element("cust_name").getData().toString();
				String xcreditCardId = root.element("credit_card_id").getData().toString();
				String xidCardNum = root.element("id_card_num").getData().toString();
				String xorderAmount = root.element("order_amount").getData().toString();
				String xvideoUrl = root.element("video_url").getData().toString();
				String xcityCode = root.element("city_code").getData().toString();
				String xloanPurpose = root.element("loan_purpose").getData().toString();
				String xloanTime = root.element("loan_time").getData().toString();
				String xcreateDate = orderMessage.getCreateDate().toString();
				String xmsgType = orderMessage.getMsgType();
				WorkMsg workmsg = new WorkMsg(xcustName,xphoneNum,xcreditCardId,xidCardNum,xorderId,
						xorderAmount,xvideoUrl,xcityCode,xloanPurpose,xloanTime,xcreateDate,xmsgType);
				workMsgList.add(workmsg);
			} catch(Exception ex) {
				ex.printStackTrace();
				logger.error(ex.getMessage());
			}
		}
		return new Result(true,workMsgList);
	}
	
	
}